diff --git a/common/propertymapper.h b/common/propertymapper.h
index fd24278..e02e885 100644
--- a/common/propertymapper.h
+++ b/common/propertymapper.h
@@ -71,7 +71,7 @@ public:
     virtual ~PropertyMapper(){};
 
     template <typename T, typename Buffer, typename BufferBuilder, typename FunctionReturnValue, typename Arg>
-    void addMapping(FunctionReturnValue (Buffer::*f)() const, void (BufferBuilder::*f2)(Arg))
+    void addMapping(FunctionReturnValue (Buffer::*f)() const, BufferBuilder& (BufferBuilder::*f2)(Arg))
     {
         addReadMapping<T, Buffer, FunctionReturnValue>(f);
         addWriteMapping<T, BufferBuilder>(f2);
@@ -123,7 +123,7 @@ private:
     }
 
     template <typename T, typename BufferBuilder>
-    void addWriteMapping(void (BufferBuilder::*f)(uint8_t))
+    void addWriteMapping(BufferBuilder& (BufferBuilder::*f)(uint8_t))
     {
         addWriteMapping(T::name, [f](const QVariant &value, flatbuffers::FlatBufferBuilder &fbb) -> std::function<void(void *builder)> {
             return [value, f](void *builder) { (static_cast<BufferBuilder*>(builder)->*f)(value.value<typename T::Type>()); };
@@ -131,7 +131,7 @@ private:
     }
 
     template <typename T, typename BufferBuilder>
-    void addWriteMapping(void (BufferBuilder::*f)(bool))
+    void addWriteMapping(BufferBuilder& (BufferBuilder::*f)(bool))
     {
         addWriteMapping(T::name, [f](const QVariant &value, flatbuffers::FlatBufferBuilder &fbb) -> std::function<void(void *builder)> {
             return [value, f](void *builder) { (static_cast<BufferBuilder*>(builder)->*f)(value.value<typename T::Type>()); };
@@ -139,7 +139,7 @@ private:
     }
 
     template <typename T, typename BufferBuilder, typename Arg>
-    void addWriteMapping(void (BufferBuilder::*f)(flatbuffers::Offset<Arg>))
+    void addWriteMapping(BufferBuilder& (BufferBuilder::*f)(flatbuffers::Offset<Arg>))
     {
         addWriteMapping(T::name, [f](const QVariant &value, flatbuffers::FlatBufferBuilder &fbb) -> std::function<void(void *builder)> {
             auto offset = variantToProperty<typename T::Type>(value, fbb);

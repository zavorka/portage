diff -Nru openjdk.orig/common/autoconf/toolchain.m4 openjdk/common/autoconf/toolchain.m4
--- openjdk.orig/common/autoconf/toolchain.m4
+++ openjdk/common/autoconf/toolchain.m4
@@ -249,20 +249,6 @@ AC_DEFUN([TOOLCHAIN_SETUP_PATHS],
   # Setting only --host, does not seem to be really supported.
   # Please set both --build and --host if you want to cross compile.
 
-  if test "x$COMPILE_TYPE" = "xcross"; then
-    # Now we to find a C/C++ compiler that can build executables for the build
-    # platform. We can't use the AC_PROG_CC macro, since it can only be used
-    # once. Also, we need to do this before adding a tools dir to the path,
-    # otherwise we might pick up cross-compilers which don't use standard naming.
-    # Otherwise, we'll set the BUILD_tools to the native tools, but that'll have
-    # to wait until they are properly discovered.
-    AC_PATH_PROGS(BUILD_CC, [cl cc gcc])
-    BASIC_FIXUP_EXECUTABLE(BUILD_CC)
-    AC_PATH_PROGS(BUILD_CXX, [cl CC g++])
-    BASIC_FIXUP_EXECUTABLE(BUILD_CXX)
-    AC_PATH_PROG(BUILD_LD, ld)
-    BASIC_FIXUP_EXECUTABLE(BUILD_LD)
-  fi
   AC_SUBST(BUILD_CC)
   AC_SUBST(BUILD_CXX)
   AC_SUBST(BUILD_LD)
@@ -296,135 +282,12 @@ AC_DEFUN([TOOLCHAIN_SETUP_PATHS],
     PATH=$TOOLS_DIR:$PATH
   fi
 
-  # Before we locate the compilers, we need to sanitize the Xcode build environment
-  if test "x$OPENJDK_TARGET_OS" = "xmacosx"; then
-    # determine path to Xcode developer directory
-    # can be empty in which case all the tools will rely on a sane Xcode 4 installation
-    SET_DEVELOPER_DIR=
-
-    if test -n "$XCODE_PATH"; then
-      DEVELOPER_DIR="$XCODE_PATH"/Contents/Developer
-    fi
-
-    # DEVELOPER_DIR could also be provided directly
-    AC_MSG_CHECKING([Determining if we need to set DEVELOPER_DIR])
-    if test -n "$DEVELOPER_DIR"; then
-      if test ! -d "$DEVELOPER_DIR"; then
-        AC_MSG_ERROR([Xcode Developer path does not exist: $DEVELOPER_DIR, please provide a path to the Xcode 4 application bundle using --with-xcode-path])
-      fi
-      if test ! -f "$DEVELOPER_DIR"/usr/bin/xcodebuild; then
-        AC_MSG_ERROR([Xcode Developer path is not valid: $DEVELOPER_DIR, it must point to Contents/Developer inside an Xcode application bundle])
-      fi
-      # make it visible to all the tools immediately
-      export DEVELOPER_DIR
-      SET_DEVELOPER_DIR="export DEVELOPER_DIR := $DEVELOPER_DIR"
-      AC_MSG_RESULT([yes ($DEVELOPER_DIR)])
-    else
-      AC_MSG_RESULT([no])
-    fi
-    AC_SUBST(SET_DEVELOPER_DIR)
-
-    AC_PATH_PROG(XCODEBUILD, xcodebuild)
-    if test -z "$XCODEBUILD"; then
-      AC_MSG_ERROR([The xcodebuild tool was not found, the Xcode command line tools are required to build on Mac OS X])
-    fi
-
-    # Fail-fast: verify we're building on Xcode 4, we cannot build with Xcode 5 or later
-    XCODE_VERSION=`$XCODEBUILD -version | grep '^Xcode ' | sed 's/Xcode //'`
-    XC_VERSION_PARTS=( ${XCODE_VERSION//./ } )
-    if test ! "${XC_VERSION_PARTS[[0]]}" = "4"; then
-      AC_MSG_ERROR([Xcode 4 is required to build JDK 8, the version found was $XCODE_VERSION. Use --with-xcode-path to specify the location of Xcode 4 or make Xcode 4 active by using xcode-select.])
-    fi
-
-    # Some versions of Xcode 5 command line tools install gcc and g++ as symlinks to
-    # clang and clang++, which will break the build. So handle that here if we need to.
-    if test -L "/usr/bin/gcc" -o -L "/usr/bin/g++"; then
-      # use xcrun to find the real gcc and add it's directory to PATH
-      # then autoconf magic will find it
-      AC_MSG_NOTICE([Found gcc symlinks to clang in /usr/bin, adding path to real gcc to PATH])
-      XCODE_BIN_PATH=$(dirname `xcrun -find gcc`)
-      PATH="$XCODE_BIN_PATH":$PATH
-    fi
-
-    # Determine appropriate SDKPATH, don't use SDKROOT as it interferes with the stub tools
-    AC_MSG_CHECKING([Determining Xcode SDK path])
-    # allow SDKNAME to be set to override the default SDK selection
-    SDKPATH=`"$XCODEBUILD" -sdk ${SDKNAME:-macosx} -version | grep '^Path: ' | sed 's/Path: //'`
-    if test -n "$SDKPATH"; then
-      AC_MSG_RESULT([$SDKPATH])
-    else
-      AC_MSG_RESULT([(none, will use system headers and frameworks)])
-    fi
-    AC_SUBST(SDKPATH)
-
-    # Perform a basic sanity test
-    if test ! -f "$SDKPATH/System/Library/Frameworks/Foundation.framework/Headers/Foundation.h"; then
-      AC_MSG_ERROR([Unable to find required framework headers, provide a valid path to Xcode 4 using --with-xcode-path])
-    fi
-
-    # if SDKPATH is non-empty then we need to add -isysroot and -iframework for gcc and g++
-    if test -n "$SDKPATH"; then
-      # We need -isysroot <path> and -iframework<path>/System/Library/Frameworks
-      CFLAGS_JDK="${CFLAGS_JDK} -isysroot \"$SDKPATH\" -iframework\"$SDKPATH/System/Library/Frameworks\""
-      CXXFLAGS_JDK="${CXXFLAGS_JDK} -isysroot \"$SDKPATH\" -iframework\"$SDKPATH/System/Library/Frameworks\""
-      LDFLAGS_JDK="${LDFLAGS_JDK} -isysroot \"$SDKPATH\" -iframework\"$SDKPATH/System/Library/Frameworks\""
-    fi
-    
-    # These always need to be set, or we can't find the frameworks embedded in JavaVM.framework
-    # setting this here means it doesn't have to be peppered throughout the forest
-    CFLAGS_JDK="$CFLAGS_JDK -F\"$SDKPATH/System/Library/Frameworks/JavaVM.framework/Frameworks\""
-    CXXFLAGS_JDK="$CXXFLAGS_JDK -F\"$SDKPATH/System/Library/Frameworks/JavaVM.framework/Frameworks\""
-    LDFLAGS_JDK="$LDFLAGS_JDK -F\"$SDKPATH/System/Library/Frameworks/JavaVM.framework/Frameworks\""
-  fi
-
-  ### Locate C compiler (CC)
-
-  # On windows, only cl.exe is supported.
-  # On Solaris, cc is preferred to gcc.
-  # Elsewhere, gcc is preferred to cc.
-
-  if test "x$CC" != x; then
-    COMPILER_CHECK_LIST="$CC"
-  elif test "x$OPENJDK_TARGET_OS" = "xwindows"; then
-    COMPILER_CHECK_LIST="cl"
-  elif test "x$OPENJDK_TARGET_OS" = "xsolaris"; then
-    COMPILER_CHECK_LIST="cc gcc"
-  elif test "x$OPENJDK_TARGET_OS" = "xaix"; then
-    # Do not probe for cc on AIX.
-    COMPILER_CHECK_LIST="xlc_r"
-  else
-    COMPILER_CHECK_LIST="gcc cc"
-  fi
-
-  TOOLCHAIN_FIND_COMPILER([CC],[C],[$COMPILER_CHECK_LIST])
   # Now that we have resolved CC ourself, let autoconf have its go at it
   AC_PROG_CC([$CC])
-
-  # Option used to tell the compiler whether to create 32- or 64-bit executables
-  # Notice that CC contains the full compiler path at this point.
-  case $CC in
-    *xlc_r) COMPILER_TARGET_BITS_FLAG="-q";;
-    *)      COMPILER_TARGET_BITS_FLAG="-m";;
-  esac
+  COMPILER_TARGET_BITS_FLAG="-m"
   AC_SUBST(COMPILER_TARGET_BITS_FLAG)
 
   ### Locate C++ compiler (CXX)
-
-  if test "x$CXX" != x; then
-    COMPILER_CHECK_LIST="$CXX"
-  elif test "x$OPENJDK_TARGET_OS" = "xwindows"; then
-    COMPILER_CHECK_LIST="cl"
-  elif test "x$OPENJDK_TARGET_OS" = "xsolaris"; then
-    COMPILER_CHECK_LIST="CC g++"
-  elif test "x$OPENJDK_TARGET_OS" = "xaix"; then
-    # Do not probe for CC on AIX .
-    COMPILER_CHECK_LIST="xlC_r"
-  else
-    COMPILER_CHECK_LIST="g++ CC"
-  fi
-
-  TOOLCHAIN_FIND_COMPILER([CXX],[C++],[$COMPILER_CHECK_LIST])
-  # Now that we have resolved CXX ourself, let autoconf have its go at it
   AC_PROG_CXX([$CXX])
 
   # This is the compiler version number on the form X.Y[.Z]
@@ -432,16 +295,7 @@ AC_DEFUN([TOOLCHAIN_SETUP_PATHS],
   AC_SUBST(CXX_VERSION)
 
   TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS
-
-  ### Locate other tools
-
-  if test "x$OPENJDK_TARGET_OS" = xmacosx; then
-    AC_PROG_OBJC
-    BASIC_FIXUP_EXECUTABLE(OBJC)
-  else
-    OBJC=
-  fi
-
+  OBJC=
   # Restore the flags to the user specified values.
   # This is necessary since AC_PROG_CC defaults CFLAGS to "-g -O2"
   CFLAGS="$ORG_CFLAGS"
diff --git a/openjdk/common/autoconf/toolchain.m4 b/openjdk/common/autoconf/toolchain.m4
index 60ae7f9..f8dcba2 100644
--- a/openjdk/common/autoconf/toolchain.m4
+++ b/openjdk/common/autoconf/toolchain.m4
@@ -249,20 +249,6 @@ AC_DEFUN([TOOLCHAIN_SETUP_PATHS],
   # Setting only --host, does not seem to be really supported.
   # Please set both --build and --host if you want to cross compile.
 
-  if test "x$COMPILE_TYPE" = "xcross"; then
-    # Now we to find a C/C++ compiler that can build executables for the build
-    # platform. We can't use the AC_PROG_CC macro, since it can only be used
-    # once. Also, we need to do this before adding a tools dir to the path,
-    # otherwise we might pick up cross-compilers which don't use standard naming.
-    # Otherwise, we'll set the BUILD_tools to the native tools, but that'll have
-    # to wait until they are properly discovered.
-    AC_PATH_PROGS(BUILD_CC, [cl cc gcc])
-    BASIC_FIXUP_EXECUTABLE(BUILD_CC)
-    AC_PATH_PROGS(BUILD_CXX, [cl CC g++])
-    BASIC_FIXUP_EXECUTABLE(BUILD_CXX)
-    AC_PATH_PROG(BUILD_LD, ld)
-    BASIC_FIXUP_EXECUTABLE(BUILD_LD)
-  fi
   AC_SUBST(BUILD_CC)
   AC_SUBST(BUILD_CXX)
   AC_SUBST(BUILD_LD)
@@ -296,135 +282,12 @@ AC_DEFUN([TOOLCHAIN_SETUP_PATHS],
     PATH=$TOOLS_DIR:$PATH
   fi
 
-  # Before we locate the compilers, we need to sanitize the Xcode build environment
-  if test "x$OPENJDK_TARGET_OS" = "xmacosx"; then
-    # determine path to Xcode developer directory
-    # can be empty in which case all the tools will rely on a sane Xcode 4 installation
-    SET_DEVELOPER_DIR=
-
-    if test -n "$XCODE_PATH"; then
-      DEVELOPER_DIR="$XCODE_PATH"/Contents/Developer
-    fi
-
-    # DEVELOPER_DIR could also be provided directly
-    AC_MSG_CHECKING([Determining if we need to set DEVELOPER_DIR])
-    if test -n "$DEVELOPER_DIR"; then
-      if test ! -d "$DEVELOPER_DIR"; then
-        AC_MSG_ERROR([Xcode Developer path does not exist: $DEVELOPER_DIR, please provide a path to the Xcode 4 application bundle using --with-xcode-path])
-      fi
-      if test ! -f "$DEVELOPER_DIR"/usr/bin/xcodebuild; then
-        AC_MSG_ERROR([Xcode Developer path is not valid: $DEVELOPER_DIR, it must point to Contents/Developer inside an Xcode application bundle])
-      fi
-      # make it visible to all the tools immediately
-      export DEVELOPER_DIR
-      SET_DEVELOPER_DIR="export DEVELOPER_DIR := $DEVELOPER_DIR"
-      AC_MSG_RESULT([yes ($DEVELOPER_DIR)])
-    else
-      AC_MSG_RESULT([no])
-    fi
-    AC_SUBST(SET_DEVELOPER_DIR)
-
-    AC_PATH_PROG(XCODEBUILD, xcodebuild)
-    if test -z "$XCODEBUILD"; then
-      AC_MSG_ERROR([The xcodebuild tool was not found, the Xcode command line tools are required to build on Mac OS X])
-    fi
-
-    # Fail-fast: verify we're building on Xcode 4, we cannot build with Xcode 5 or later
-    XCODE_VERSION=`$XCODEBUILD -version | grep '^Xcode ' | sed 's/Xcode //'`
-    XC_VERSION_PARTS=( ${XCODE_VERSION//./ } )
-    if test ! "${XC_VERSION_PARTS[[0]]}" = "4"; then
-      AC_MSG_ERROR([Xcode 4 is required to build JDK 8, the version found was $XCODE_VERSION. Use --with-xcode-path to specify the location of Xcode 4 or make Xcode 4 active by using xcode-select.])
-    fi
-
-    # Some versions of Xcode 5 command line tools install gcc and g++ as symlinks to
-    # clang and clang++, which will break the build. So handle that here if we need to.
-    if test -L "/usr/bin/gcc" -o -L "/usr/bin/g++"; then
-      # use xcrun to find the real gcc and add it's directory to PATH
-      # then autoconf magic will find it
-      AC_MSG_NOTICE([Found gcc symlinks to clang in /usr/bin, adding path to real gcc to PATH])
-      XCODE_BIN_PATH=$(dirname `xcrun -find gcc`)
-      PATH="$XCODE_BIN_PATH":$PATH
-    fi
-
-    # Determine appropriate SDKPATH, don't use SDKROOT as it interferes with the stub tools
-    AC_MSG_CHECKING([Determining Xcode SDK path])
-    # allow SDKNAME to be set to override the default SDK selection
-    SDKPATH=`"$XCODEBUILD" -sdk ${SDKNAME:-macosx} -version | grep '^Path: ' | sed 's/Path: //'`
-    if test -n "$SDKPATH"; then
-      AC_MSG_RESULT([$SDKPATH])
-    else
-      AC_MSG_RESULT([(none, will use system headers and frameworks)])
-    fi
-    AC_SUBST(SDKPATH)
-
-    # Perform a basic sanity test
-    if test ! -f "$SDKPATH/System/Library/Frameworks/Foundation.framework/Headers/Foundation.h"; then
-      AC_MSG_ERROR([Unable to find required framework headers, provide a valid path to Xcode 4 using --with-xcode-path])
-    fi
-
-    # if SDKPATH is non-empty then we need to add -isysroot and -iframework for gcc and g++
-    if test -n "$SDKPATH"; then
-      # We need -isysroot <path> and -iframework<path>/System/Library/Frameworks
-      CFLAGS_JDK="${CFLAGS_JDK} -isysroot \"$SDKPATH\" -iframework\"$SDKPATH/System/Library/Frameworks\""
-      CXXFLAGS_JDK="${CXXFLAGS_JDK} -isysroot \"$SDKPATH\" -iframework\"$SDKPATH/System/Library/Frameworks\""
-      LDFLAGS_JDK="${LDFLAGS_JDK} -isysroot \"$SDKPATH\" -iframework\"$SDKPATH/System/Library/Frameworks\""
-    fi
-    
-    # These always need to be set, or we can't find the frameworks embedded in JavaVM.framework
-    # setting this here means it doesn't have to be peppered throughout the forest
-    CFLAGS_JDK="$CFLAGS_JDK -F\"$SDKPATH/System/Library/Frameworks/JavaVM.framework/Frameworks\""
-    CXXFLAGS_JDK="$CXXFLAGS_JDK -F\"$SDKPATH/System/Library/Frameworks/JavaVM.framework/Frameworks\""
-    LDFLAGS_JDK="$LDFLAGS_JDK -F\"$SDKPATH/System/Library/Frameworks/JavaVM.framework/Frameworks\""
-  fi
-
-  ### Locate C compiler (CC)
-
-  # On windows, only cl.exe is supported.
-  # On Solaris, cc is preferred to gcc.
-  # Elsewhere, gcc is preferred to cc.
-
-  if test "x$CC" != x; then
-    COMPILER_CHECK_LIST="$CC"
-  elif test "x$OPENJDK_TARGET_OS" = "xwindows"; then
-    COMPILER_CHECK_LIST="cl"
-  elif test "x$OPENJDK_TARGET_OS" = "xsolaris"; then
-    COMPILER_CHECK_LIST="cc gcc"
-  elif test "x$OPENJDK_TARGET_OS" = "xaix"; then
-    # Do not probe for cc on AIX.
-    COMPILER_CHECK_LIST="xlc_r"
-  else
-    COMPILER_CHECK_LIST="gcc cc"
-  fi
-
-  TOOLCHAIN_FIND_COMPILER([CC],[C],[$COMPILER_CHECK_LIST])
   # Now that we have resolved CC ourself, let autoconf have its go at it
   AC_PROG_CC([$CC])
-
-  # Option used to tell the compiler whether to create 32- or 64-bit executables
-  # Notice that CC contains the full compiler path at this point.
-  case $CC in
-    *xlc_r) COMPILER_TARGET_BITS_FLAG="-q";;
-    *)      COMPILER_TARGET_BITS_FLAG="-m";;
-  esac
+  COMPILER_TARGET_BITS_FLAG="-m"
   AC_SUBST(COMPILER_TARGET_BITS_FLAG)
 
   ### Locate C++ compiler (CXX)
-
-  if test "x$CXX" != x; then
-    COMPILER_CHECK_LIST="$CXX"
-  elif test "x$OPENJDK_TARGET_OS" = "xwindows"; then
-    COMPILER_CHECK_LIST="cl"
-  elif test "x$OPENJDK_TARGET_OS" = "xsolaris"; then
-    COMPILER_CHECK_LIST="CC g++"
-  elif test "x$OPENJDK_TARGET_OS" = "xaix"; then
-    # Do not probe for CC on AIX .
-    COMPILER_CHECK_LIST="xlC_r"
-  else
-    COMPILER_CHECK_LIST="g++ CC"
-  fi
-
-  TOOLCHAIN_FIND_COMPILER([CXX],[C++],[$COMPILER_CHECK_LIST])
-  # Now that we have resolved CXX ourself, let autoconf have its go at it
   AC_PROG_CXX([$CXX])
 
   # This is the compiler version number on the form X.Y[.Z]
@@ -432,16 +295,7 @@ AC_DEFUN([TOOLCHAIN_SETUP_PATHS],
   AC_SUBST(CXX_VERSION)
 
   TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS
-
-  ### Locate other tools
-
-  if test "x$OPENJDK_TARGET_OS" = xmacosx; then
-    AC_PROG_OBJC
-    BASIC_FIXUP_EXECUTABLE(OBJC)
-  else
-    OBJC=
-  fi
-
+  OBJC=
   # Restore the flags to the user specified values.
   # This is necessary since AC_PROG_CC defaults CFLAGS to "-g -O2"
   CFLAGS="$ORG_CFLAGS"
